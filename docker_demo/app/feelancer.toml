# DISCLAIMER
# All values beginning with the feelancer section and its defaults are for illustrative
# purposes only. The author does not wish to make any recommendations at this
# point of the project. Every user should find out for themselves how the
# algorithm works and find their own values.

[lnd]
cert_filepath = "/root/.lnd/tls.cert"
# for policy updates you have to change it, e.g. to admin.macaroon
macaroon_filepath = "/root/.lnd/data/chain/bitcoin/testnet/readonly.macaroon"
ip_address = "192.168.2.21:10009"

# The maximum number of payments to be returned during payment pre sync
paginator_max_payments = 10000 # default: 10000 messages

# grpc options
grpc_max_message_length = 209_715_200         # default: 200 MB
grpc_max_receive_message_length = 209_715_200 # default: 200 MB
grpc_max_connection_idle_ms = 30_000          # default: 30 seconds
grpc_keepalive_time_ms = 30_000               # default: 30 seconds
grpc_keepalive_timeout_ms = 20_000            # default: 20 seconds


[sqlalchemy.url]
# Sqlalchemy configuration for your database.
drivername = "postgresql"
username = "feelancer"
port = 5432
host = "db"
database = "feelancer"
password = "feelancer"

[logging]
level = "DEBUG"
logfile = "/app/feelancer.log"

## Feelancer specific configuration

[feelancer]
# General parameters independent from specific models and specific peers.

# Execution interval of the jobs
seconds = 900 # mandatory


[feelancer.peers.default]
# General parameters independent from specific models but dependent on the peer.
# One can configure defaults for all peers here

# Minimum time interval in seconds between two policy broadcasts to the network.
# Not recommend to set this at high value when you run other scripts performing
# policy updates.
min_seconds = 3600 # Default: 86400s (24 hours)

# Minimum ppm change up / down, which has to be applied when broadcasting fee_rate to
# the network.
fee_rate_ppm_min_up = 5   # Default: 10ppm
fee_rate_ppm_min_down = 1 # Default: 10ppm

# Minimum and maximum fee_rate in ppm can be configured. 
fee_rate_min = 1    # Default: 0
fee_rate_max = 2121 # Default: 2500

# Minimum ppm change up / down, which has to be applied when broadcasting fee_rate to# Minimum time interval in seconds between two policy broadcasts to the network.
# the network.
inbound_fee_rate_ppm_min_up = 2   # Default: 10ppm
inbound_fee_rate_ppm_min_down = 5 # Default: 10ppm
# Minimum and maximum fee_rate in ppm can be configured. 
inbound_fee_rate_min = -99999 # Default: -2500
inbound_fee_rate_max = 0      # Default: 0


# You can also overwrite the default values for specific peers.
# Only overwrites on a peer level are supported and not on a channel level.
# You can name the GROUP in [feelancer.peers.GROUP] like whatever you want, it
# has to be unique only.
[feelancer.peers.boltz]
pubkeys = [
    "026165850492521f4ac8abd9bd8088123446d126f648ca35e60f88177dc149ceb2",
    "02d96eadea3d780104449aca5c93461ce67c1564e2e1d73225fa67dd3b997a6018",
]
min_seconds = 1


## Model specific configuration
# At the moment only the pid-model is applied. Pid models a peer dependent spread
# rate only wit a PID-Controller. Moreover a rudimentary margin controller
# is implemented.
[pid]

# List of peers and/or chan_ids to be excluded from the pid model, i.e. such peers
# are not used for the calculation of the default target and no results are stored
# in the database and are sent to lnd.
exclude_pubkeys = []
exclude_chanids = []

# If true then the policy updates are not sent to the lnd backend. This flag is
# only useful for testing purposes, e.g. on mainnet. Then the user can analyze
# the potential behavior of the feelancer with logs and db entries.
db_only = true # default: True

# 'no_db_only_pubkeys' is a list of pubkeys for which the db_only==True is ignored.
# It can be used as whitelist during a bootstrapping of the tool.
no_db_only_pubkeys = [] # default: []


# If true then also inbound discounts and fees are derived. The setting of positive
# inbound fees can be prevented with inbound_fee_rate_max = 0 in the feelancer
# section.
set_inbound = true # default: False

# Typically, either ‘fee_rate_new_local’ or ‘fee_rate_new_remote’ is used on
# channels with new peers. However, we want to prevent existing fees from being
# overwritten, especially during the first run of the feelancer. Therefore, the
# aforementioned fee rates are only used if a channel does not exceed the age
# ‘max_age_new_channels’ in blocks.
max_age_new_channels = 144 # default: 144blocks 

# If a peer was not included in the last run, it may make sense to use the last
# available spread, e.g. if a channel was recently closed. However, we must
# ensure that we do not pull values from the database that are too old.
# 'max_age_spread_hours' specifies how old a spread may be in hours.
max_age_spread_hours = 72 # default: 0 hours


[pid.pin]
# Optional feature. If a peer is pinned, you can choose whether you want to keep
# the fee rate or the spread constant at the specified pin value for this peer.
# Then the delta between the pin value and the current value is calculated.
# This delta is applied as a shift to all spread controllers, which changes
# the spreads of all controllers about the value.
peer = "026165850492521f4ac8abd9bd8088123446d126f648ca35e60f88177dc149ceb2"
# 'fee_rate' or 'spread'
method = "spread"
value = 84


[pid.spread_level]
# Optional and experimental feature. A spread level controller is a simple ewma
# controller set up with k_p only.
# It uses as error function the difference between the average spread rate 
# (remote liquidity weighted) and average spread rate (target weighted) minus
# the specified target_ppm.
# The difference is bounded by +/- max_deviation_ppm and normed 
# by 2 * max_deviation_ppm. Hence we receive an error in the range [-0.5, 0.5].
k_p = 20
max_deviation_ppm = 200
target_ppm = 100

[pid.margin]

mr_controller = { k_m = 50, alpha = 0.1 }


[pid.peers.default]
# These are the default parameters for each peer using the pid model.
# The values can overwritten for specific groups of peers, e.g. [feelancer.peers.boltz]
fee_rate_new_local = 1500 # default: 21000
fee_rate_new_remote = 250 # default: 0

# Error calculation parameters for PID controller
# These parameters define the error function used in the spread controller
# The error is calculated based on the liquidity ratio compared to the target
# Between ratio_error_min and ratio_error_max the error is linearly interpolated.

# Maximum positive error value when liquidity_in ratio is at or above ratio_error_max
error_max = 1.0 # default: 0.5

# Minimum negative error value when liquidity_in ratio is at or below ratio_error_min
error_min = -0.1 # default: -0.5

# Upper bound for liquidity ratio (in millionths) where error reaches error_max
# If liquidity_in/(liquidity_in+liquidity_out) >= ratio_error_max/1_000_000, error = error_max
ratio_error_max = 800_000 # default: 1_000_000

# Lower bound for liquidity ratio (in millionths) where error reaches error_min
# If liquidity_in/(liquidity_in+liquidity_out) <= ratio_error_min/1_000_000, error = error_min
ratio_error_min = 200_000 # default: 0

# Relevant for recalculating the ewma if a parameter changes. Not implemented yet
lambda_epsilon = 1e-4

ewma_controller = { k_t = 0.1, k_p = 1, alpha_i = 0.04, k_i = 4.8, alpha_d = 1, k_d = 2.4 } # default: params are 0

# A margin add-on in ppm on top of the margin controller, which can be defined
# idiosyncratically for each peer.
margin_idiosyncratic = -10

# A second margin add-on in percent of the spread, which can also be defined
# idiosyncratically for each peer.
margin_idiosyncratic_pct = 5.0

# Minimum value of the idiosyncratic margin in ppm.
margin_idiosyncratic_min = -100

# Maximum value of the idiosyncratic margin in ppm.
margin_idiosyncratic_max = 100

[pid.peers.boltz]
# This is an example of a group of peers with specific parameters. The name of
# the group is arbitrary, but has to be unique. All groups has to be distinct,
# i.e. no two groups can have the same pubkey.
pubkeys = [
    "026165850492521f4ac8abd9bd8088123446d126f648ca35e60f88177dc149ceb2",
    "02d96eadea3d780104449aca5c93461ce67c1564e2e1d73225fa67dd3b997a6018",
]
target = 900_000
ewma_controller = { k_p = 1 }


[reconnect]
# If the 'reconnect' section is included in config file a reconnect service will be started.
# It reconnects channels with stuck htlcs and maybe inactive channels.

# inactive channels are only included if set to true.
include_inactive = false # Default: false

# An htlc is defined as stuck if the expiry is less blocks away than this value
max_blocks_to_expiry = 13 # Default: 13

[paytrack]
# If the 'paytrack' section is included in config file a paytrack service will be started.
# It stores all successful and failed payments in the database.

# The following params control the creation of csv files using the stored data.
# The files are created every feelancer.seconds.

# All mentioned values in ths section are its default values.
# Create the a list with pub_key, average node speed and count of payments
node_speed_write_csv = false
# time window of the historical data
node_speed_time_window_hours = 48
# percentiles to calculate, separated by comma. First element determines the 
# order of the list
node_speed_percentiles = [50]
# csv file path
node_speed_csv_file = "~/.feelancer/node_speed.csv"

# Create a list with pub_keys of all slow nodes
slow_nodes_write_csv = false
# minimum number of htlc attempts
slow_nodes_min_attempts = 0
# percentile to use.
slow_nodes_percentile = 50
# minimum average node speed
slow_nodes_min_speed = 21
# csv file path
slow_nodes_csv_file = "~/.feelancer/slow_nodes.csv"

# Create a list with all htlc attempts and its locked liquidity
htlc_liquidity_write_csv = false
# csv file path
htlc_liquidity_locked_csv_file = "~/.feelancer/htlc_liquidity_locked.csv"

# Housekeeping, delete failed payments and htlc attempts. Job is running every
# feelancer.seconds. Orphaned payment requests are deleted during next startup.
delete_failed = true
# Number of hours to keep failed payments and htlc attempts
delete_failed_hours = 168
